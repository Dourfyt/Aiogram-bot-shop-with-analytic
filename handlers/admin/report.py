from datetime import datetime, timedelta
import logging
from aiogram.types import Message
from loader import dp, db
from handlers.user.menu import orders
import pandas as pd
from filters import IsAdmin
import matplotlib.pyplot as plt

month = (datetime.now() - timedelta(days=31)).isoformat()
week = (datetime.now() - timedelta(days=7)).isoformat()
day = (datetime.now() - timedelta(days=1)).isoformat()

@dp.message_handler(IsAdmin(), text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def report(message: Message):
    msg = await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
    msg

    users = db.fetchone("SELECT COUNT(*) FROM users")
    categories = db.fetchall("SELECT idx,title from categories")
    abandoned_carts = get_abandoned_carts()
    abandonment_rate = get_abandoned_rate()

    visits = get_visits()
    active_users = get_active_users()
    new_users = get_new_users()
    orders = get_orders()
 
    try:
        await msg.edit_text(
                            f"–ü–û–°–ï–¢–ò–¢–ï–õ–ò üßç‚Äç‚ôÄüßç‚Äç‚ôÇ\n\n" \
                            f'–ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô - {users[0]}\n\n' \
                            f'–ù–û–í–´–ï –î / –ù / –ú - {new_users[0]} / {new_users[1]} / {new_users[2]}\n\n' \
                            f'–ê–ö–¢–ò–í–ù–´–ï –î / –ù / –ú - {active_users[0]} / {active_users[1]} / {active_users[2]}\n\n' \
                            f'–í–ï–†–ù–£–í–®–ò–ï–°–Ø –ó–ê –ú–ï–°–Ø–¶ - {get_back()}\n\n' \
                            f'–ü–û–°–ï–©–ï–ù–ò–ô –î / –ù / –ú - {visits[0]} / {visits[1]} / {visits[2]}\n\n' \
                            f'–ü–†–û–°–ú–û–¢–†–û–í –ó–ê –°–ï–°–°–ò–Æ –°–†–ï–î–ù–ï–ï - {get_pages_visited_for_session()}\n\n' \
                            "==================\n\n" \
                            '–ö–û–†–ó–ò–ù–ê üóë\n\n' \
                            f'–ù–ï –û–¢–ü–†–ê–í–õ–ï–ù–û –î / –ù / –ú  - {abandoned_carts[0]} / {abandoned_carts[1]} / {abandoned_carts[2]}\n\n' \
                            f'–ù–ï –û–¢–ü–†–ê–í–õ–ï–ù–û –û–¢ –û–ë–©–ï–ì–û –ö–û–õ-–í–ê –ü–û–°–ï–¢–ò–¢–ï–õ–ï–ô –î / –ù / –ú - {abandonment_rate[0]}% / {abandonment_rate[1]}% / {abandonment_rate[2]}%\n\n'
                            f'–û–¢–ü–†–ê–í–õ–ï–ù–û –î / –ù / –ú - {orders[0]} / {orders[1]} / {orders[2]}\n\n'
                            f'–ö–û–ù–í–ï–†–°–ò–Ø –î / –ù / –ú - {round((orders[0]/visits[0]), 2)*100}% / {round((orders[1]/visits[1]),2)*100}% / {round((orders[2]/visits[2]),2)*100}%\n\n'
                            )
        msg = '==================\n\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–û–í–ê–†–ê–ú: \n\n'


        for categorie in categories:
            views_cat = get_views_cat(categorie)
            products = db.fetchall("SELECT idx,title from products WHERE tag = ?", (categorie[1],))
            msg = msg + f"------------------\n\n{categorie[1]}:\n–ü–†–û–°–ú–û–¢–†–û–í –ö–ê–¢–ï–ì–û–†–ò–ò –î / –ù / –ú - {views_cat[0]} / {views_cat[1]} / {views_cat[2]}\n" + "\n"
            for product in products:
                cart_adds = get_cart_adds(product)
                msg = msg + f"- –¢–û–í–ê–† {product[1]}\n–î–û–ë–ê–í–õ–ï–ù–û –î / –ù / –ú - {cart_adds[0]} / {cart_adds[1]} / {cart_adds[2]}\n\n"
        await message.answer(msg)
    except:
        logging.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞')

    try:
        make_graph_visits()
        with open('graphs/attendance.png', 'rb') as photo:
            await message.answer_photo(photo)
    except:
        logging.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏')
    try:
        make_graph_categories_views()
        with open('graphs/daily_category_visits.png', 'rb') as photo:
            await message.answer_photo(photo)
    except:
        logging.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')

def get_visits() -> tuple: 
    visits_for_month = db.fetchone("SELECT COUNT(*) FROM visits WHERE visit_time > ?", (month,))[0]
    visits_for_week = db.fetchone("SELECT COUNT(*) FROM visits WHERE visit_time > ?", (week,))[0]
    visits_for_day = db.fetchone("SELECT COUNT(*) FROM visits WHERE visit_time > ?", (day,))[0]
    return (visits_for_day, visits_for_week, visits_for_month)

def get_active_users() -> tuple:
    active_users_for_month = db.fetchone("SELECT COUNT(*) from users WHERE last_seen > ?", (month,))[0]
    active_users_for_week = db.fetchone("SELECT COUNT(*) from users WHERE last_seen > ?", (week,))[0]
    active_users_for_day = db.fetchone("SELECT COUNT(*) from users WHERE last_seen > ?", (day,))[0]
    return (active_users_for_day, active_users_for_week, active_users_for_month)

def get_new_users() -> tuple:
    new_users_for_month = db.fetchone("SELECT COUNT(*) from users WHERE first_seen > ?", (month,))[0]
    new_users_for_week= db.fetchone("SELECT COUNT(*) from users WHERE first_seen > ?", (week,))[0]
    new_users_for_day = db.fetchone("SELECT COUNT(*) from users WHERE first_seen > ?", (day,))[0]
    return (new_users_for_day, new_users_for_week, new_users_for_month)

def get_cart_adds(product) -> tuple:
    cart_for_month = db.fetchone("SELECT COUNT(*) FROM product_buys WHERE product_id = ? AND view_time > ?", (product[0], month,))[0]
    cart_for_week = db.fetchone("SELECT COUNT(*) FROM product_buys WHERE product_id = ? AND view_time > ?", (product[0], week,))[0]
    cart_for_day = db.fetchone("SELECT COUNT(*) FROM product_buys WHERE product_id = ? AND view_time > ?", (product[0], day,))[0]
    return (cart_for_day,cart_for_week, cart_for_month)

def get_views_cat(categorie) -> tuple:
    views_cat_for_month = db.fetchone("SELECT COUNT(*) FROM categories_views WHERE categorie_id = ? AND view_time > ?", (categorie[0], month,))[0]
    views_cat_for_week = db.fetchone("SELECT COUNT(*) FROM categories_views WHERE categorie_id = ? AND view_time > ?", (categorie[0], week,))[0]
    views_cat_for_day = db.fetchone("SELECT COUNT(*) FROM categories_views WHERE categorie_id = ? AND view_time > ?", (categorie[0], day,))[0]
    return (views_cat_for_day, views_cat_for_week, views_cat_for_month)

def get_abandoned_rate() -> tuple:
    visits = get_visits()
    abandoned_carts = get_abandoned_carts()
    if visits[0] > 0:
        abandonment_rate_for_day = (abandoned_carts[0] / visits[0]) * 10
    else:
        abandonment_rate_for_day = '–ù–ï–¢ –î–ê–ù–ù–´–•'

    if visits[1] > 0:
        abandonment_rate_for_week = (abandoned_carts[1] / visits[1]) * 100
    else:
        abandonment_rate_for_week = '–ù–ï–¢ –î–ê–ù–ù–´–•'

    if visits[2] > 0:
        abandonment_rate_for_month = (abandoned_carts[2] / visits[2]) * 100
    else:
        abandonment_rate_for_month = '–ù–ï–¢ –î–ê–ù–ù–´–•'

    return (round(float(abandonment_rate_for_day),2), round(float(abandonment_rate_for_week),2), round(float(abandonment_rate_for_month),2))
    
def get_abandoned_carts():
    for_day = db.fetchone("SELECT COUNT(*) FROM abandoned_carts WHERE time_checked > ?", (day,))[0]
    for_week = db.fetchone("SELECT COUNT(*) FROM abandoned_carts WHERE time_checked > ?", (week,))[0]
    for_month = db.fetchone("SELECT COUNT(*) FROM abandoned_carts WHERE time_checked > ?", (month,))[0]
    return (for_day, for_week, for_month)

def get_orders():
    for_day = db.fetchone("SELECT COUNT(*) FROM orders WHERE order_time > ?", ((datetime.now()-timedelta(days=1)).isoformat(),))[0]
    for_week = db.fetchone("SELECT COUNT(*) FROM orders WHERE order_time > ?", ((datetime.now()-timedelta(days=7)).isoformat(),))[0]
    for_month = db.fetchone("SELECT COUNT(*) FROM orders WHERE order_time > ?", ((datetime.now()-timedelta(days=31)).isoformat(),))[0]
    return (for_day, for_week, for_month)

def get_pages_visited_for_session():
    return round(db.fetchone("SELECT AVG(pages_visited) FROM sessions")[0],2)

def get_back():
    return db.fetchone("SELECT COUNT(*) FROM users WHERE is_returning = 1 AND last_seen > ?", (month,))[0]

def make_graph_visits():
    end_date = datetime.now()
    start_date = end_date - timedelta(days=30)
    query = """
        SELECT visit_time 
        FROM visits
        WHERE visit_time BETWEEN ? AND ?
    """
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    data = db.fetchall(query, (start_date.isoformat(), end_date.isoformat()))
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
    df = pd.DataFrame(data, columns=['visit_time'])
    df['visit_time'] = pd.to_datetime(df['visit_time'])

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π
    df['day'] = df['visit_time'].dt.date
    daily_counts = df.groupby('day').size()

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(10, 5))
    daily_counts.plot(kind='bar', color='skyblue')
    plt.title('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("graphs/attendance.png", bbox_inches='tight')

def make_graph_categories_views():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    end_date = datetime.now()
    start_date = end_date - timedelta(days=30)

    # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    query = """
        SELECT c.title AS category_title, r.title AS section_title, cv.view_time 
        FROM categories_views AS cv
        JOIN categories AS c ON cv.categorie_id = c.idx 
        JOIN razdels AS r ON c.tag = r.idx 
        WHERE cv.view_time BETWEEN ? AND ?
    """
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    data = db.fetchall(query, (start_date.isoformat(), end_date.isoformat()))

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
    df = pd.DataFrame(data, columns=['category_title', 'section_title', 'view_time'])
    df['view_time'] = pd.to_datetime(df['view_time'])

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–æ–º–±–∏–Ω–∏—Ä—É—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    df['full_title'] = df['section_title'] + ' - ' + df['category_title']

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ –∏ –ø–æ–ª–Ω–æ–º—É –∑–∞–≥–æ–ª–æ–≤–∫—É, —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π
    df['day'] = df['view_time'].dt.date
    daily_counts = df.groupby(['day', 'full_title']).size().unstack(fill_value=0)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(12, 6))
    daily_counts.plot(kind='line', marker='o', figsize=(12, 6))
    plt.title('–ü–æ—Å–µ—â–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π')
    plt.xticks(rotation=45)
    plt.legend(title='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()
    plt.savefig("graphs/daily_category_visits.png")
    plt.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –≥—Ä–∞—Ñ–∏–∫–∞