import logging
import random
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from aiogram.types import CallbackQuery
from hashlib import md5
from aiogram.dispatcher import FSMContext
from aiogram.types.chat import ChatActions
from aiogram.types import ReplyKeyboardMarkup
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import ContentType

from handlers.user.menu import settings
from states import CategoryState, ProductState, RazdelState
from loader import bot
from loader import dp, db
from filters import IsAdmin
from keyboards.default.markups import *
from keyboards.inline.products_from_catalog import confirm_files_markup, confirm_photo_markup, confirm_price_markup

files_cb = CallbackData("product",'id', "action")
razdel_cb = CallbackData('razdel', 'id', 'action')
category_cb = CallbackData('category', 'id', 'action')
product_cb = CallbackData('product', 'id', 'action')

delete_category = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
rename_category = "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
delete_razdel = "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª"
rename_razdel = "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞"
add_product = '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'
add_category_to_razdels = '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'

#–ü–û–ö–ê–ó–´–í–ê–ï–¢ –°–ü–ò–°–û–ö –†–ê–ó–î–ï–õ–û–í
@dp.message_handler(IsAdmin(), text=settings)
async def process_settings(message: Message):

    markup = InlineKeyboardMarkup()

    for idx, title in db.fetchall('SELECT * FROM razdels'):

        markup.add(InlineKeyboardButton(
            title, callback_data=razdel_cb.new(id=idx, action='view')))

    markup.add(InlineKeyboardButton(
        '+ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª', callback_data='add_razdel'))

    await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤:', reply_markup=markup)

#–ù–ê–ó–í–ê–ù–ò–ï –†–ê–ó–î–ï–õ–ê
@dp.callback_query_handler(IsAdmin(), text='add_razdel')
async def add_razdel_callback_handler(query: CallbackQuery):
    await query.message.delete()
    await query.message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞?')
    await RazdelState.title.set()

#–î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ê–ó–î–ï–õ–ê
@dp.message_handler(IsAdmin(), state=RazdelState.title)
async def set_razdel_title_handler(message: Message, state: FSMContext):

    razdel = message.text
    idx = int(str(random.getrandbits(128))[:16])
    db.query('INSERT INTO razdels VALUES (?, ?)', (idx, razdel))

    await state.finish()
    await process_settings(message)

# –ü–û–ö–ê–ó–´–í–ê–ï–¢ –ö–ê–¢–ï–ì–û–†–ò–ò –†–ê–ó–î–ï–õ–ê
@dp.callback_query_handler(IsAdmin(), razdel_cb.filter(action='view'))
async def category_callback_handler(query: CallbackQuery, callback_data: dict,
                                    state: FSMContext):
    try:
        razdel_idx = callback_data['id']
        async with state.proxy() as data:
            data["razdel_id"] = razdel_idx

        products = db.fetchall('''SELECT categories.idx, categories.title 
                            FROM categories 
                            WHERE categories.tag = ?;
                            ''',
                            (razdel_idx,))
        markup = InlineKeyboardMarkup()

        for idx, title in products:

            markup.add(InlineKeyboardButton(
                title, callback_data=category_cb.new(id=idx, action='view')))

        markup.add(InlineKeyboardButton(
            '+ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='add_category_to_razdels'))
        
        reply =  ReplyKeyboardMarkup()
        reply.add(delete_razdel)
        reply.add(rename_razdel)

        await query.message.delete()
        await query.message.answer('–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞.', reply_markup=markup)
        await query.message.answer('–•–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å?', reply_markup=reply)
        await state.update_data(razdel_index=razdel_idx)
    except Exception as e:
        logging.error(f"{e}")
        

#–ü–û–ö–ê–ó–´–í–ê–ï–¢ –¢–û–í–ê–†–´
@dp.callback_query_handler(IsAdmin(), category_cb.filter(action='view'))
async def category_callback_handler(query: CallbackQuery, callback_data: dict,
                                    state: FSMContext):
    category_idx = callback_data['id']

    products = db.fetchall('''SELECT * FROM products
    WHERE tag = ?''',
                           (category_idx,))

    await query.message.delete()
    await query.answer('–í—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.')
    await state.update_data(category_index=category_idx)
    await show_products(query.message, products, category_idx)


#–ü–û–ö–ê–ó–´–í–ê–ï–¢ –¢–û–í–ê–†–´
async def show_products(m, products, category_idx):
    await bot.send_chat_action(m.chat.id, ChatActions.TYPING)
    try:
        for idx, title, body, image, price, tag, files in products:
            
            if price != 0:
                text = f'<b>{title}</b>\n\n{body}\n\n–¶–µ–Ω–∞: {price} ‚ÇΩ'
            else:
                text = f'<b>{title}</b>\n\n{body}\n\n'

            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(
                'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å',
                callback_data=product_cb.new(id=idx, action='delete')))
            if files:
                markup.add(InlineKeyboardButton(f'–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã',
                                        callback_data=product_cb.new(id=idx,
                                                                    action='show')))
            if image != "":
                await m.answer_photo(photo=image,
                                    caption=text,
                                    reply_markup=markup)
            else:
                await m.answer(text, reply_markup=markup) 
    except:
        pass

    markup = ReplyKeyboardMarkup()
    markup.add(add_product)
    markup.add(delete_category)
    markup.add(rename_category)

    await m.answer('–•–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å?',
                   reply_markup=markup)

#–ü–û–ö–ê–ó–´–í–ê–ï–¢ –§–ê–ô–õ–´
@dp.callback_query_handler(IsAdmin(), files_cb.filter(action='show'))
async def file_show_callback_handler(query: CallbackQuery,
                                       callback_data: dict, state: FSMContext):
        files = db.fetchone('''SELECT files FROM products WHERE idx = ?''', (callback_data['id'],))[0]
        prod_name = db.fetchone('''SELECT title FROM products WHERE idx = ?''', (callback_data['id'],))[0]
        files = files.strip().rstrip('|').split("|")
        await query.message.answer(f"{prod_name}:")
        for file in files:
            await query.message.answer_document(file)

#–£–î–ê–õ–Ø–ï–¢ –†–ê–ó–î–ï–õ
@dp.message_handler(IsAdmin(), text=delete_razdel)
async def delete_razdel_handler(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if 'razdel_index' in data.keys():
            idx = data['razdel_index']

            db.query(
                'DELETE FROM categories WHERE tag IN (SELECT '
                'title FROM razdels WHERE idx=?)',
                (idx,))
            db.query('DELETE FROM razdels WHERE idx=?', (idx,))

            await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=ReplyKeyboardRemove())
            await process_settings(message)

#–ú–ï–ù–Ø–ï–¢ –ù–ê–ó–í–ê–ù–ò–ï –†–ê–ó–î–ï–õ–ê
@dp.message_handler(IsAdmin(), text=rename_razdel)
async def rename_category_handler(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞')
    await RazdelState.rename_razdel.set()

#–ú–ï–ù–Ø–ï–¢ –ù–ê–ó–í–ê–ù–ò–ï –†–ê–ó–î–ï–õ–ê
@dp.message_handler(IsAdmin(), state=RazdelState.rename_razdel)
async def rename_category_handler(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if 'razdel_index' in data.keys():
            idx = data['razdel_index']
            db.query("UPDATE razdels SET title = ? WHERE idx = ?", (message.text,idx,))
            await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=ReplyKeyboardRemove())
            await process_settings(message)
            await state.finish()


#–£–î–ê–õ–Ø–ï–¢ –ö–ê–¢–ï–ì–û–†–ò–Æ
@dp.message_handler(IsAdmin(), text=delete_category)
async def delete_category_handler(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if 'category_index' in data.keys():
            idx = data['category_index']

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç products –∏ categories
            db.query('DELETE FROM product_buys WHERE product_id IN (SELECT idx FROM products WHERE tag=?)', (idx,))
            db.query('DELETE FROM products WHERE tag=?', (idx,))
            db.query('DELETE FROM categories_views WHERE categorie_id=?', (idx,))

            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            db.query('DELETE FROM categories WHERE idx=?', (idx,))

            await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=ReplyKeyboardRemove())
            await process_settings(message)

#–ú–ï–ù–Ø–ï–¢ –ù–ê–ó–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò
@dp.message_handler(IsAdmin(), text=rename_category)
async def rename_category_handler(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    await CategoryState.rename_category.set()

#–ú–ï–ù–Ø–ï–¢ –ù–ê–ó–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò
@dp.message_handler(IsAdmin(), state=CategoryState.rename_category)
async def rename_category_handler(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if 'category_index' in data.keys():
            idx = data['category_index']
            db.query("UPDATE categories SET title = ? WHERE idx = ?", (message.text,idx,))
            await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=ReplyKeyboardRemove())
            await process_settings(message)
            await state.finish()


#–î–û–ë–ê–í–ò–¢–¨ –ö–ê–¢–ï–ì–û–†–ò–Æ
@dp.callback_query_handler(IsAdmin(), lambda call: call.data == "add_category_to_razdels")
async def process_add_category(query: CallbackQuery):
    await CategoryState.add_category.set()

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(cancel_message)

    await query.message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ?', reply_markup=markup)

#–û–¢–ú–ï–ù–ê –°–û–ó–î–ê–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ò
@dp.message_handler(IsAdmin(), text=cancel_message, state=CategoryState.add_category)
async def process_cancel(message: Message, state: FSMContext):
    await message.answer('–û–∫, –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=ReplyKeyboardRemove())
    await state.finish()

    await process_settings(message)

#–°–û–•–†–ê–ù–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò
@dp.message_handler(IsAdmin(), state=CategoryState.add_category)
async def process_title(message: Message, state: FSMContext):
    async with state.proxy() as data:
        razdel_id = data.get('razdel_id')
    idx = str(random.getrandbits(128))[:16]
    db.query("INSERT INTO categories VALUES (?,?,?)", (idx,message.text,razdel_id,))
    await message.answer('–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', reply_markup=ReplyKeyboardRemove())
    await state.finish()

    await process_settings(message)


#–ù–ê–ß–ê–õ–û –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–ê
@dp.message_handler(IsAdmin(), text=add_product)
async def process_add_product(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', reply_markup=ReplyKeyboardRemove())
    await ProductState.title.set()

#–û–¢–ú–ï–ù–ê
@dp.message_handler(IsAdmin(), text=cancel_message, state=ProductState.title)
async def process_cancel(message: Message, state: FSMContext):
    await message.answer('–û–∫, –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=ReplyKeyboardRemove())
    await state.finish()

    await process_settings(message)

#–°–û–•–†–ê–ù–Ø–ï–¢ –ù–ê–ó–í–ê–ù–ò–ï, –ü–†–û–°–ò–¢ –û–ü–ò–°–ê–ù–ò–ï
@dp.message_handler(IsAdmin(), state=ProductState.title)
async def process_title(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text

    await ProductState.next()
    await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ?', reply_markup=back_markup())


@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.title)
async def process_title_back(message: Message, state: FSMContext):
    await process_add_product(message)


@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.body)
async def process_body_back(message: Message, state: FSMContext):
    await ProductState.title.set()

    async with state.proxy() as data:
        await message.answer(f"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å <b>{data['title']}</b>?",
                             reply_markup=back_markup())

#–°–û–•–†–ê–ù–Ø–ï–¢ –û–ü–ò–°–ê–ù–ò–ï, –ü–†–û–°–ò–¢ –§–û–¢–û
@dp.message_handler(IsAdmin(), state=ProductState.body)
async def process_body(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['body'] = message.text

    await ProductState.next()
    await message.answer('–§–æ—Ç–æ?', reply_markup=confirm_photo_markup())

#–ü–†–û–ü–£–°–ö–ê–ï–¢ –§–û–¢–û, –ü–†–û–°–ò–¢ –§–ê–ô–õ
@dp.callback_query_handler(IsAdmin(), text='confirm_photo', state=ProductState.image)
async def confirm_process_photo(query : CallbackQuery,  state: FSMContext):
    async with state.proxy() as data:
        data['image'] = ""
        data['files'] = []
    await ProductState.next()
    await query.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ"', reply_markup=confirm_files_markup())

#–ü–û–õ–£–ß–ê–ï–¢ –§–û–¢–û, –ü–†–û–°–ò–¢ –§–ê–ô–õ
@dp.message_handler(IsAdmin(), content_types=ContentType.PHOTO,
                    state=ProductState.image)
async def process_image_photo(message: Message, state: FSMContext):
    fileID = message.photo[-1].file_id
    file_info = await bot.get_file(fileID)
    downloaded_file = (await bot.download_file(file_info.file_path)).read()

    async with state.proxy() as data:
        data['image'] = downloaded_file

    await ProductState.next()
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ"', reply_markup=confirm_files_markup())

#–ü–û–õ–£–ß–ê–ï–¢ –§–ê–ô–õ –ò –ü–†–û–°–ò–¢ –ï–©–ï
@dp.message_handler(IsAdmin(), content_types=ContentType.DOCUMENT,
                    state=ProductState.files)
async def process_files(message: Message, state: FSMContext):
    fileID = message.document.file_id
    async with state.proxy() as data:
        if 'files' not in data:
            data['files'] = []
        data['files'].append(fileID)
    await message.answer('–≠—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã? –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ', reply_markup=confirm_files_markup())

#–°–û–•–†–ê–ù–Ø–ï–¢ –§–ê–ô–õ –ò –ü–†–û–°–ò–¢ –¶–ï–ù–£
@dp.callback_query_handler(IsAdmin(), text='confirm_files', state=ProductState.files)
async def confirm_process_files(query : CallbackQuery,  state: FSMContext):
    await ProductState.next()
    await query.message.answer("–¶–µ–Ω–∞?", reply_markup=confirm_price_markup())

#–°–û–•–†–ê–ù–Ø–ï–¢ –¶–ï–ù–£ –ò –í–´–í–û–î–ò–¢ –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –¢–û–í–ê–†–ê
@dp.message_handler(IsAdmin(), lambda message: message.text.isdigit(),
                    state=ProductState.price)
async def process_price(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text

        title = data['title']
        body = data['body']
        price = data['price']
        files = data['files']

        await ProductState.next()
        text = f'<b>{title}</b>\n\n{body}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π.'

        markup = check_markup()
        if data['image'] != "":
            await message.answer_photo(photo=data['image'],
                                   caption=text,
                                   reply_markup=markup)
        else:
            await message.answer(text, reply_markup=markup)
        if files != "":
            for file in files:
                await message.answer_document(file)
        else:
            pass

#–ü–†–û–ü–£–°–ö–ê–ï–¢ –¶–ï–ù–£ –ò –í–´–í–û–î–ò–¢ –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –¢–û–í–ê–†–ê
@dp.callback_query_handler(IsAdmin(), text='confirm_price',
                    state=ProductState.price)
async def process_price(query: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = "0"

        title = data['title']
        body = data['body']
        files = data['files']

        await ProductState.next()
        text = f'<b>{title}</b>\n\n{body}\n\n'

        markup = check_markup()
        if data['image'] != "":
            await query.message.answer_photo(photo=data['image'],
                                   caption=text,
                                   reply_markup=markup)
        else:
            await query.message.answer(text, reply_markup=markup)
        if files != "":
            for file in files:
                await query.message.answer_document(file)
        else:
            pass

#–°–û–•–†–ê–ù–Ø–ï–¢ –¢–û–í–ê–† –í –ë–î
@dp.message_handler(IsAdmin(), text=all_right_message,
                    state=ProductState.confirm)
async def process_confirm(message: Message, state: FSMContext):
    async with state.proxy() as data:
        title = data['title']
        body = data['body']
        image = data['image']
        price = data['price']
        files = ''.join([f"{file}|" for file in data['files']])

        tag = db.fetchone(
            'SELECT idx FROM categories WHERE idx=?',
            (data['category_index'],))[0]
        idx = md5(' '.join([title, body, price, tag]
                           ).encode('utf-8')).hexdigest()
        db.query('INSERT INTO products VALUES (?, ?, ?, ?, ?, ?, ?)',
                 (idx, title, body, image, int(price), str(tag).strip(), files))
    await state.finish()
    await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=ReplyKeyboardRemove())
    await process_settings(message)


#–£–î–ê–õ–Ø–ï–¢ –ü–†–û–î–£–ö–¢
@dp.callback_query_handler(IsAdmin(), product_cb.filter(action='delete'))
async def delete_product_callback_handler(query: CallbackQuery,
                                          callback_data: dict):
    product_idx = callback_data['id']
    db.query('DELETE FROM products WHERE idx=?', (product_idx,))
    await query.answer('–£–¥–∞–ª–µ–Ω–æ!')
    await query.message.delete()


@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.confirm)
async def process_confirm_back(message: Message, state: FSMContext):
    await ProductState.price.set()

    async with state.proxy() as data:
        await message.answer(f"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Å <b>{data['price']}</b>?",
                             reply_markup=back_markup())


@dp.message_handler(IsAdmin(), content_types=ContentType.TEXT,
                    state=ProductState.image)
async def process_image_url(message: Message, state: FSMContext):
    if message.text == back_message:

        await ProductState.body.set()

        async with state.proxy() as data:

            await message.answer(f"–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å <b>{data['body']}</b>?",
                                 reply_markup=back_markup())

    else:

        await message.answer('–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.')


@dp.message_handler(IsAdmin(), lambda message: not message.text.isdigit(),
                    state=ProductState.price)
async def process_price_invalid(message: Message, state: FSMContext):
    if message.text == back_message:

        await ProductState.image.set()

        async with state.proxy() as data:

            await message.answer("–î—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?",
                                 reply_markup=back_markup())

    else:

        await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞!')


@dp.message_handler(IsAdmin(),
                    lambda message: message.text not in [back_message,
                                                         all_right_message],
                    state=ProductState.confirm)
async def process_confirm_invalid(message: Message, state: FSMContext):
    await message.answer('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ.')

