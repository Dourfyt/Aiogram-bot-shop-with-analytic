from datetime import datetime, timedelta
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup
from aiogram.types import ReplyKeyboardRemove
from aiogram import executor
from logging import basicConfig, INFO

from data.config import ADMINS
from loader import dp, db, bot, session

import handlers

SESSION_TIMEOUT = 900

user_message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
admin_message = '–ê–¥–º–∏–Ω'

def track_session(user_id):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if session.exists(f"session:{user_id}"):
        session.setex(f"session:{user_id}", SESSION_TIMEOUT, now)
    else:
        db.query("INSERT INTO visits (user_id, visit_time) VALUES (?,?)", (user_id, now))
        session.setex(f"session:{user_id}", SESSION_TIMEOUT, now)

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    user = db.fetchone("SELECT * FROM users WHERE user_id = ?", (message.from_user.id,))
    track_session(message.from_user.id)
    if user:
        db.query("UPDATE users SET last_seen = ? WHERE user_id = ?", (datetime.now(), message.from_user.id))
        db.query("UPDATE users SET is_returning = ? WHERE user_id = ? AND last_seen > ?", (1, message.from_user.id, (datetime.now() - timedelta(days=31)).isoformat()))
    else:
        db.query("INSERT INTO users (user_id, first_seen, last_seen, is_returning) VALUES (?, ?, ?, 0)", 
                       (message.from_user.id, datetime.now(), datetime.now()))
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(user_message, admin_message)

    await message.answer('''–ü—Ä–∏–≤–µ—Ç! üëã

ü§ñ –Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω –ø–æ –ø–æ–¥–∞–∂–µ —Ç–æ–≤–∞—Ä–æ–≤ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

üõçÔ∏è –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–≥–ª—è–Ω—É–≤—à–∏–µ—Å—è 
—Ç–æ–≤–∞—Ä—ã –≤–æ–∑–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu.

‚ùì –í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –ù–µ –ø—Ä–æ–±–ª–µ–º–∞! –ö–æ–º–∞–Ω–¥–∞ /sos –ø–æ–º–æ–∂–µ—Ç 
—Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–∞—Ä–∞—é—Ç—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è.
    ''', reply_markup=markup)


@dp.message_handler(text=admin_message)
async def admin_mode(message: types.Message):
    cid = message.chat.id
    if cid not in ADMINS:
        ADMINS.append(cid)

    await message.answer('–í–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º.',
                         reply_markup=ReplyKeyboardRemove())


@dp.message_handler(text=user_message)
async def user_mode(message: types.Message):
    cid = message.chat.id
    if cid in ADMINS:
        ADMINS.remove(cid)

    await message.answer('–í–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º.',
                         reply_markup=ReplyKeyboardRemove())


async def on_startup(dp):
    basicConfig(level=INFO)
    db.create_tables()


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=False)
